package stoppowgui;

import SciTK.DialogError;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.DefaultListModel;

import SciTK.PlotXYLine;
import cStopPow.StopPow;
import cStopPow.cStopPow;
import cStopPow.FloatVector2D;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadPoolExecutor;
import javax.swing.SwingUtilities;

/**
 * Implement GUI functionality for defining and generating
 * various plots of stopping power quantities.
 *
 * @author Alex Zylstra
 * @date 2013/05/21
 */
public class PlotManagerGUI extends javax.swing.JFrame implements ModelChangeListener
{
    private JFrame parent;
    private ModelManager models;
    /** The StopPowGUI application keeps a pool of threads for calculations */
    protected ThreadPoolExecutor exec;
    private PlotManager plots;
    
    /**
     * Create a new GUI window for managing plots
     * @param parent The parent JFrame (i.e. top-level window)
     * @param models The ModelManager in use by this application
     * @param calcPool A pool of threads available for background numeric tasks
     */
    public PlotManagerGUI(JFrame parent, ModelManager models, ThreadPoolExecutor calcPool) {
        this.parent = parent;
        this.models = models;
        this.exec = calcPool;
        
        plots = new PlotManager(exec,models);
        
        // register this with the ModelManager:
        models.addModelChangeListener(this);
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        modelList = new javax.swing.JList(new DefaultListModel());
        goButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        modeComboBox = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        dEdxScrollPane = new javax.swing.JScrollPane();
        dEdxPanel = new javax.swing.JPanel();
        dEdxCheckBox = new javax.swing.JCheckBox();
        EoutScrollPane = new javax.swing.JScrollPane();
        EoutPanel = new javax.swing.JPanel();
        EoutCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        EoutOrdinateComboBox = new javax.swing.JComboBox();
        EoutSecondaryLabel = new javax.swing.JLabel();
        EoutSecondaryTextField = new javax.swing.JTextField();
        EoutSecondaryUnits = new javax.swing.JLabel();
        EinScrollPane = new javax.swing.JScrollPane();
        EinPanel = new javax.swing.JPanel();
        EinCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        EinOrdinateComboBox = new javax.swing.JComboBox();
        EinSecondaryLabel = new javax.swing.JLabel();
        EinSecondaryTextField = new javax.swing.JTextField();
        EinSecondaryUnits = new javax.swing.JLabel();
        ThicknessScrollPane = new javax.swing.JScrollPane();
        ThicknessPanel = new javax.swing.JPanel();
        ThicknessCheckBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        ThicknessOrdinateComboBox = new javax.swing.JComboBox();
        ThicknessSecondaryLabel = new javax.swing.JLabel();
        ThicknessSecondaryTextField = new javax.swing.JTextField();
        ThicknessSecondaryUnits = new javax.swing.JLabel();
        RangeScrollPane = new javax.swing.JScrollPane();
        RangePanel = new javax.swing.JPanel();
        RangeCheckBox = new javax.swing.JCheckBox();

        setTitle("Plot Manager");
        setResizable(false);

        jScrollPane1.setViewportView(modelList);

        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Mode");

        modeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MeV/um", "MeV/(mg/cm2)" }));
        modeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeComboBoxActionPerformed(evt);
            }
        });

        dEdxPanel.setPreferredSize(new java.awt.Dimension(200, 100));

        dEdxCheckBox.setText("Generate");

        org.jdesktop.layout.GroupLayout dEdxPanelLayout = new org.jdesktop.layout.GroupLayout(dEdxPanel);
        dEdxPanel.setLayout(dEdxPanelLayout);
        dEdxPanelLayout.setHorizontalGroup(
            dEdxPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dEdxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(dEdxCheckBox)
                .addContainerGap(232, Short.MAX_VALUE))
        );
        dEdxPanelLayout.setVerticalGroup(
            dEdxPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dEdxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(dEdxCheckBox)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        dEdxScrollPane.setViewportView(dEdxPanel);

        jTabbedPane1.addTab("dE/dx", dEdxScrollPane);

        EoutPanel.setPreferredSize(new java.awt.Dimension(200, 100));

        EoutCheckBox.setText("Generate");

        jLabel1.setText("Plot vs");

        EoutOrdinateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Thickness", "Ein" }));
        EoutOrdinateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EoutOrdinateComboBoxActionPerformed(evt);
            }
        });

        EoutSecondaryLabel.setText("Ein    ");

        EoutSecondaryTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EoutSecondaryTextFieldActionPerformed(evt);
            }
        });

        EoutSecondaryUnits.setText("MeV");

        org.jdesktop.layout.GroupLayout EoutPanelLayout = new org.jdesktop.layout.GroupLayout(EoutPanel);
        EoutPanel.setLayout(EoutPanelLayout);
        EoutPanelLayout.setHorizontalGroup(
            EoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EoutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(EoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(EoutCheckBox)
                    .add(EoutPanelLayout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(EoutOrdinateComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, EoutPanelLayout.createSequentialGroup()
                        .add(EoutSecondaryLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(EoutSecondaryTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EoutSecondaryUnits)
                .addContainerGap(113, Short.MAX_VALUE))
        );
        EoutPanelLayout.setVerticalGroup(
            EoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EoutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(EoutCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(EoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(EoutOrdinateComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(EoutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(EoutSecondaryLabel)
                    .add(EoutSecondaryTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(EoutSecondaryUnits))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        EoutScrollPane.setViewportView(EoutPanel);

        jTabbedPane1.addTab("Eout", EoutScrollPane);

        EinPanel.setPreferredSize(new java.awt.Dimension(200, 100));

        EinCheckBox.setText("Generate");

        jLabel3.setText("Plot vs");

        EinOrdinateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Thickness", "Eout" }));
        EinOrdinateComboBox.setSelectedIndex(1);
        EinOrdinateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EinOrdinateComboBoxActionPerformed(evt);
            }
        });

        EinSecondaryLabel.setText("Thickness");

        EinSecondaryTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EinSecondaryTextFieldActionPerformed(evt);
            }
        });

        EinSecondaryUnits.setText("um");

        org.jdesktop.layout.GroupLayout EinPanelLayout = new org.jdesktop.layout.GroupLayout(EinPanel);
        EinPanel.setLayout(EinPanelLayout);
        EinPanelLayout.setHorizontalGroup(
            EinPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EinPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(EinPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(EinPanelLayout.createSequentialGroup()
                        .add(EinSecondaryLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(9, 9, 9)
                        .add(EinSecondaryTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(EinPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(EinCheckBox)
                        .add(EinPanelLayout.createSequentialGroup()
                            .add(jLabel3)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(EinOrdinateComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(EinSecondaryUnits)
                .addContainerGap(119, Short.MAX_VALUE))
        );
        EinPanelLayout.setVerticalGroup(
            EinPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, EinPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(EinCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(EinPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(EinOrdinateComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(EinPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(EinSecondaryLabel)
                    .add(EinSecondaryTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(EinSecondaryUnits))
                .add(31, 31, 31))
        );

        EinScrollPane.setViewportView(EinPanel);

        jTabbedPane1.addTab("Ein", EinScrollPane);

        ThicknessPanel.setPreferredSize(new java.awt.Dimension(200, 100));

        ThicknessCheckBox.setText("Generate");

        jLabel8.setText("Plot vs");

        ThicknessOrdinateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ein", "Eout" }));
        ThicknessOrdinateComboBox.setPreferredSize(new java.awt.Dimension(105, 31));
        ThicknessOrdinateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThicknessOrdinateComboBoxActionPerformed(evt);
            }
        });

        ThicknessSecondaryLabel.setText("Eout");

        ThicknessSecondaryUnits.setText("MeV");

        org.jdesktop.layout.GroupLayout ThicknessPanelLayout = new org.jdesktop.layout.GroupLayout(ThicknessPanel);
        ThicknessPanel.setLayout(ThicknessPanelLayout);
        ThicknessPanelLayout.setHorizontalGroup(
            ThicknessPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ThicknessPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(ThicknessPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ThicknessCheckBox)
                    .add(ThicknessPanelLayout.createSequentialGroup()
                        .add(ThicknessPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(ThicknessPanelLayout.createSequentialGroup()
                                .add(ThicknessSecondaryLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(11, 11, 11)
                                .add(ThicknessSecondaryTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(ThicknessPanelLayout.createSequentialGroup()
                                .add(jLabel8)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(ThicknessOrdinateComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ThicknessSecondaryUnits)))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        ThicknessPanelLayout.setVerticalGroup(
            ThicknessPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ThicknessPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(ThicknessCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(ThicknessPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(ThicknessOrdinateComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(ThicknessPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ThicknessSecondaryLabel)
                    .add(ThicknessSecondaryTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ThicknessSecondaryUnits))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        ThicknessScrollPane.setViewportView(ThicknessPanel);

        jTabbedPane1.addTab("Thickness", ThicknessScrollPane);

        RangePanel.setPreferredSize(new java.awt.Dimension(200, 100));

        RangeCheckBox.setText("Generate");

        org.jdesktop.layout.GroupLayout RangePanelLayout = new org.jdesktop.layout.GroupLayout(RangePanel);
        RangePanel.setLayout(RangePanelLayout);
        RangePanelLayout.setHorizontalGroup(
            RangePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(RangePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(RangeCheckBox)
                .addContainerGap(232, Short.MAX_VALUE))
        );
        RangePanelLayout.setVerticalGroup(
            RangePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(RangePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(RangeCheckBox)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        RangeScrollPane.setViewportView(RangePanel);

        jTabbedPane1.addTab("Range", RangeScrollPane);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(152, 152, 152)
                        .add(goButton))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 350, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jLabel4)
                        .add(66, 66, 66))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(modeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(41, 41, 41)
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(modeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(goButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action listener for the button which creates plots
     * @param evt The generating ActionEvent for this call
     */
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // if necessary, add a dE/dx plot:
        if(dEdxCheckBox.isSelected())
        {
            PlotParameters dEdx = new PlotParameters();
            dEdx.keys = getSelectedModelKeys();
            dEdx.mode = (String)modeComboBox.getSelectedItem();
            dEdx.ordinate = "Energy";
            dEdx.abscissa = "dE/dx";
            plots.addPlot(dEdx);
        }
        
        // if necessary, add a Eout plot
        if(EoutCheckBox.isSelected())
        {
            PlotParameters Eout = new PlotParameters();
            Eout.keys = getSelectedModelKeys();
            Eout.mode = (String)modeComboBox.getSelectedItem();
            Eout.ordinate = (String)EoutOrdinateComboBox.getSelectedItem();
            Eout.abscissa = "Eout";
            // need secondary info for this plot:
            Eout.secondary = (String)EoutSecondaryLabel.getText();
            Eout.secondaryValue = Float.valueOf(EoutSecondaryTextField.getText());
            plots.addPlot(Eout);            
        }
        
        // if necessary, add a Ein plot
        if(EinCheckBox.isSelected())
        {
            PlotParameters Ein = new PlotParameters();
            Ein.keys = getSelectedModelKeys();
            Ein.mode = (String)modeComboBox.getSelectedItem();
            Ein.ordinate = (String)EinOrdinateComboBox.getSelectedItem();
            Ein.abscissa = "Ein";
            // need secondary info for this plot:
            Ein.secondary = (String)EinSecondaryLabel.getText();
            Ein.secondaryValue = Float.valueOf(EinSecondaryTextField.getText());
            plots.addPlot(Ein);            
        }
        
        // if necessary, add a Thickness plot
        if(ThicknessCheckBox.isSelected())
        {
            PlotParameters Thickness = new PlotParameters();
            Thickness.keys = getSelectedModelKeys();
            Thickness.mode = (String)modeComboBox.getSelectedItem();
            Thickness.ordinate = (String)ThicknessOrdinateComboBox.getSelectedItem();
            Thickness.abscissa = "Thickness";
            // need secondary info for this plot:
            Thickness.secondary = (String)ThicknessSecondaryLabel.getText();
            Thickness.secondaryValue = Float.valueOf(ThicknessSecondaryTextField.getText());
            plots.addPlot(Thickness);            
        }
        
        // if necessary, add a Range plot:
        if(RangeCheckBox.isSelected())
        {
            PlotParameters range = new PlotParameters();
            range.keys = getSelectedModelKeys();
            range.mode = (String)modeComboBox.getSelectedItem();
            range.ordinate = "Energy";
            range.abscissa = "Range";
            plots.addPlot(range);
        }
        
        // run:
        plots.generate();
        
        // after the plots are generated, uncheck all boxes:
        dEdxCheckBox.setSelected(false);
        EoutCheckBox.setSelected(false);
        EinCheckBox.setSelected(false);
        ThicknessCheckBox.setSelected(false);
        RangeCheckBox.setSelected(false);
    }//GEN-LAST:event_goButtonActionPerformed

    private void EoutSecondaryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EoutSecondaryTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EoutSecondaryTextFieldActionPerformed

    private void EinSecondaryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EinSecondaryTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EinSecondaryTextFieldActionPerformed

    /**
     * Action listener for the Ein panel abscissa box.
     * @param evt The ActionEvent genreating this call
     */
    private void EinOrdinateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EinOrdinateComboBoxActionPerformed
        // for Ein need another piece of info from the user
        // get that from the text field
        // this code sets the labels to the appropriate instruction
        
        // check for plot vs thickness mode:
        if( ((String)EinOrdinateComboBox.getSelectedItem()).equals("Thickness") )
        {
            EinSecondaryLabel.setText("Eout");
            EinSecondaryUnits.setText("MeV");
        }
        
        // check for plot vs Eout mode:
        if( ((String)EinOrdinateComboBox.getSelectedItem()).equals("Eout") )
        {
            EinSecondaryLabel.setText("Thickness");
            EinSecondaryUnits.setText(getModeUnits());
        }
    }//GEN-LAST:event_EinOrdinateComboBoxActionPerformed

    /**
     * Action listener for the combo box which sets the mode (length vs rhoR)
     * @param evt  The ActionEvent genreating this call
     */
    private void modeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeComboBoxActionPerformed
        String units = getModeUnits();
        
        // check to see if we need to adjust units for Eout panel:
        if( ((String)EoutOrdinateComboBox.getSelectedItem()).equals("Ein") )
                EoutSecondaryUnits.setText(units);
        
        // check to see if we need to adjust units for Ein panel:
        if( ((String)EinOrdinateComboBox.getSelectedItem()).equals("Eout") )
                EinSecondaryUnits.setText(units);
    }//GEN-LAST:event_modeComboBoxActionPerformed

    /**
     * Action listener for the Eout panel combo box which selects the abscissa
     * @param evt The ActionEvent genreating this call
     */
    private void EoutOrdinateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EoutOrdinateComboBoxActionPerformed
        // for Eout need another piece of info from the user
        // get that from the text field
        // this code sets the labels to the appropriate instruction
        
        // check for plot vs thickness mode:
        if( ((String)EoutOrdinateComboBox.getSelectedItem()).equals("Thickness") )
        {
            EoutSecondaryLabel.setText("Ein");
            EoutSecondaryUnits.setText("MeV");
        }
        
        // check for plot vs Ein mode:
        if( ((String)EoutOrdinateComboBox.getSelectedItem()).equals("Ein") )
        {
            EoutSecondaryLabel.setText("Thickness");
            EoutSecondaryUnits.setText(getModeUnits());
        }
    }//GEN-LAST:event_EoutOrdinateComboBoxActionPerformed

    /**
     * Action listener for the Thickness panel combo box which selects the abscissa
     * @param evt The ActionEvent genreating this call
     */
    private void ThicknessOrdinateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThicknessOrdinateComboBoxActionPerformed
        // have to set the secondary label correctly,
        // but units do not change
        
        if( ((String)ThicknessOrdinateComboBox.getSelectedItem()).equals("Ein") )
            ThicknessSecondaryLabel.setText("Eout");
        
        if( ((String)ThicknessOrdinateComboBox.getSelectedItem()).equals("Eout") )
            ThicknessSecondaryLabel.setText("Ein");
    }//GEN-LAST:event_ThicknessOrdinateComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox EinCheckBox;
    private javax.swing.JComboBox EinOrdinateComboBox;
    private javax.swing.JPanel EinPanel;
    private javax.swing.JScrollPane EinScrollPane;
    private javax.swing.JLabel EinSecondaryLabel;
    private javax.swing.JTextField EinSecondaryTextField;
    private javax.swing.JLabel EinSecondaryUnits;
    private javax.swing.JCheckBox EoutCheckBox;
    private javax.swing.JComboBox EoutOrdinateComboBox;
    private javax.swing.JPanel EoutPanel;
    private javax.swing.JScrollPane EoutScrollPane;
    private javax.swing.JLabel EoutSecondaryLabel;
    private javax.swing.JTextField EoutSecondaryTextField;
    private javax.swing.JLabel EoutSecondaryUnits;
    private javax.swing.JCheckBox RangeCheckBox;
    private javax.swing.JPanel RangePanel;
    private javax.swing.JScrollPane RangeScrollPane;
    private javax.swing.JCheckBox ThicknessCheckBox;
    private javax.swing.JComboBox ThicknessOrdinateComboBox;
    private javax.swing.JPanel ThicknessPanel;
    private javax.swing.JScrollPane ThicknessScrollPane;
    private javax.swing.JLabel ThicknessSecondaryLabel;
    private javax.swing.JTextField ThicknessSecondaryTextField;
    private javax.swing.JLabel ThicknessSecondaryUnits;
    private javax.swing.JCheckBox dEdxCheckBox;
    private javax.swing.JPanel dEdxPanel;
    private javax.swing.JScrollPane dEdxScrollPane;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox modeComboBox;
    private javax.swing.JList modelList;
    // End of variables declaration//GEN-END:variables

    // ---------------------------------------
    //      Various helper methods
    // ---------------------------------------
    /**
     * Get a string describing the units for length quantities
     * @return "um" or "mg/cm2" depending on the mode selection
     */
    public String getModeUnits()
    {
        // set the unit strings
        // first get the string description:
        int modeIndex = modeComboBox.getSelectedIndex();
        String units = (String)modeComboBox.getItemAt(modeIndex);
        
        // remove MeV/ and parens:
        units = units.replace("MeV/","");
        units = units.replace("(","");
        units = units.replace(")","");
        units = units.trim();
        
        return units;
    }
    
    /**
     * Get an array of key Strings for all selected models.
     * If nothing is selected, returns empty array
     * @return The array of key values
     */
    private String[] getSelectedModelKeys()
    {
        // get the selected model keys:
        Object[] modelKeysObject = modelList.getSelectedValues();
        // convert:
        String[] modelKeys = new String[ modelKeysObject.length ];
        for(int i=0; i < modelKeys.length; i++)
            modelKeys[i] = (String)modelKeysObject[i];
        
        return modelKeys;
    }
    
    // ---------------------------------------
    //  Listen for changes to models
    // ---------------------------------------
    /**
     * Model change event listener for changed models.
     * Does nothing for PlotManagerGUI but must be implemented.
     * @param evt The ModelChangeEvent generating this call
     */
    @Override
    public void model_changed(ModelChangeEvent evt) 
    {
        // don't need to do anything
    }

    /**
     * Model change event listener for added models.
     * Adds the new model described by evt to the displayed
     * list of models.
     * @param evt The ModelChangeEvent generating this call
     */
    @Override
    public void model_added(ModelChangeEvent evt) 
    {
        // add to the model list:
        ((DefaultListModel)modelList.getModel()).addElement(evt.get_key());
    }

    /**
     * Model change event listener for deleted models.
     * Removes the model described by evt.
     * @param evt The ModelChangeEvent generating this call
     */
    @Override
    public void model_deleted(ModelChangeEvent evt) 
    {
        // model that was deleted:
        String key = evt.get_key();
        
        // find it in the list and remove it:
        for(int i=0; i < modelList.getModel().getSize(); i++)
        {
            String listElement = (String)modelList.getModel().getElementAt(i);
            if( listElement.equals(key) )
            {
                ((DefaultListModel)modelList.getModel()).remove(i);
            }
        }
    }
    
    
}