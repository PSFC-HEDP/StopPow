package stoppowgui;

import java.awt.event.KeyEvent;
import javax.swing.JFrame;

import cStopPow.*;
import java.awt.event.ActionEvent;

import java.awt.event.KeyAdapter;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 * Implement a JFrame-based window to manage various
 * stopping power models for the program.
 * Models can be added or removed from this window.
 *
 * 
 * @brief GUI for managing dE/dx models
 * @class ModelManagerGUI
 * @author Alex Zylstra
 * @date 2013/06/06
 */
public class ModelManagerGUI extends javax.swing.JFrame implements ModelChangeListener {
    private ModelManager models;
    
    /**
     * Creates new form ModelManagerGUI
     * @param parent the JFrame parent of this window
     * @param m the ModelManager in use by this application
     */
    public ModelManagerGUI(JFrame parent, ModelManager m) {
        models = m;
        
        // add this as a listener to the ModelManager:
        models.addModelChangeListener(this);
        
        // set up GUI components:
        initComponents();
        
        // -----------------------------------
        //      Key Bindings
        // -----------------------------------
        // have to remove the existing enter action:
        model_table.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "Enter");
        model_table.getActionMap().remove("Enter");
        // add a new action for the enter key:
        model_table.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("released ENTER"), "myEnter");
        model_table.getActionMap().put("myEnter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                edit_model( model_table.getSelectedRow() );
            }
        });
        model_table.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("released DELETE"), "Delete");
        model_table.getActionMap().put("Delete", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                remove_from_table( model_table.getSelectedRow() );
            }
        });
        model_table.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("released BACK_SPACE"), "Backspace");
        model_table.getActionMap().put("Backspace", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                remove_from_table( model_table.getSelectedRow() );
            }
        });
        
        
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        pack();
        setLocationRelativeTo(parent);
        // start hidden:
        setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        model_table = new javax.swing.JTable();
        menu_bar = new javax.swing.JMenuBar();
        menu_add = new javax.swing.JMenu();
        menu_add_srim = new javax.swing.JMenuItem();
        menu_add_lipetrasso = new javax.swing.JMenuItem();
        menu_add_bethebloch = new javax.swing.JMenuItem();
        menu_add_andersenziegler = new javax.swing.JMenuItem();

        setTitle("Model Manager");
        setResizable(false);

        model_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Info"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        model_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(model_table);
        model_table.getColumnModel().getColumn(0).setPreferredWidth(50);
        model_table.getColumnModel().getColumn(1).setPreferredWidth(50);
        model_table.getColumnModel().getColumn(2).setPreferredWidth(200);
        model_table.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    JTable target = (JTable)e.getSource();
                    int row = target.getSelectedRow();
                    int column = target.getSelectedColumn();
                    // do edit action
                    edit_model( row );
                }
            }
        });

        menu_add.setText("Add...");
        menu_add.setToolTipText("Add a stopping power model");

        menu_add_srim.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menu_add_srim.setText("SRIM");
        menu_add_srim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_add_srimActionPerformed(evt);
            }
        });
        menu_add.add(menu_add_srim);

        menu_add_lipetrasso.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        menu_add_lipetrasso.setText("Li-Petrasso");
        menu_add_lipetrasso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_add_lipetrassoActionPerformed(evt);
            }
        });
        menu_add.add(menu_add_lipetrasso);

        menu_add_bethebloch.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        menu_add_bethebloch.setText("Bethe-Bloch");
        menu_add_bethebloch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_add_betheblochActionPerformed(evt);
            }
        });
        menu_add.add(menu_add_bethebloch);

        menu_add_andersenziegler.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menu_add_andersenziegler.setText("Andersen-Ziegler");
        menu_add_andersenziegler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_add_andersenzieglerActionPerformed(evt);
            }
        });
        menu_add.add(menu_add_andersenziegler);

        menu_add.setMnemonic(KeyEvent.VK_A);

        menu_bar.add(menu_add);

        setJMenuBar(menu_bar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 375, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menu_add_lipetrassoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_add_lipetrassoActionPerformed
        // since this runs in the event dispatch thread, it is best to wrap
        // into invokeLater:
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                add_LiPetrasso();
            }
        });
    }//GEN-LAST:event_menu_add_lipetrassoActionPerformed

    private void menu_add_srimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_add_srimActionPerformed
        // since this runs in the event dispatch thread, it is best to wrap
        // into invokeLater:
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                add_SRIM();
            }
        });
    }//GEN-LAST:event_menu_add_srimActionPerformed

    private void menu_add_betheblochActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_add_betheblochActionPerformed
        // since this runs in the event dispatch thread, it is best to wrap
        // into invokeLater:
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                add_BetheBloch();
            }
        });
    }//GEN-LAST:event_menu_add_betheblochActionPerformed

    private void menu_add_andersenzieglerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_add_andersenzieglerActionPerformed
        // since this runs in the event dispatch thread, it is best to wrap
        // into invokeLater:
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                add_AndersenZiegler();
            }
        });
    }//GEN-LAST:event_menu_add_andersenzieglerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menu_add;
    private javax.swing.JMenuItem menu_add_andersenziegler;
    private javax.swing.JMenuItem menu_add_bethebloch;
    private javax.swing.JMenuItem menu_add_lipetrasso;
    private javax.swing.JMenuItem menu_add_srim;
    private javax.swing.JMenuBar menu_bar;
    private javax.swing.JTable model_table;
    // End of variables declaration//GEN-END:variables

    // ---------------------------------------
    //   Manage the table display of models
    // ---------------------------------------
    private void remove_from_table(int index)
    {
        // sanity check:
        if( index < 0 )
            return;
        
        // get access to underlying table data:
        DefaultTableModel table_data = (DefaultTableModel)model_table.getModel();
        // get the key / name:
        String key = (String)table_data.getValueAt(index,0);
        
        // tell the ModelManager to remove this one:
        models.remove_model(key);
    }
    
    private void edit_model(int index)
    {
        // sanity check:
        if( index < 0 )
            return;
        
        // get access to underlying table data:
        DefaultTableModel table_data = (DefaultTableModel)model_table.getModel();
        // get the key / name:
        String key = (String)table_data.getValueAt(index,0);
        
        // create a new dialog:
        ModelConfigDialog d = new ModelConfigDialog(this, false, models.get_panel(key) );
        d.show();
    }
    
    // ---------------------------------------
    //       Handlers for adding models
    // ---------------------------------------
    private void add_SRIM()
    {
        // make new panel:
        ModelConfigPanel_SRIM configPanel = new ModelConfigPanel_SRIM(models);
        // create dialog:
        ModelConfigDialog dialog = new ModelConfigDialog(this,true,configPanel);
        dialog.show();
    }
    
    private void add_LiPetrasso()
    {
        // use our custom L-P panel:
        ModelConfigPanel_LP configPanel = new ModelConfigPanel_LP(models);
        // create dialog:
        ModelConfigDialog dialog = new ModelConfigDialog(this,true,configPanel);
        dialog.show();
    }
    
    private void add_BetheBloch()
    {
        // custom panel for B-B:
        ModelConfigPanel configPanel = new ModelConfigPanel_BB(models);
        // create the dialog:
        ModelConfigDialog dialog = new ModelConfigDialog(this,true,configPanel);
        dialog.show();
    }
    
    private void add_AndersenZiegler()
    {
        // custom panel:
        ModelConfigPanel configPanel = new ModelConfigPanel_AZ(models);
        // create the dialog:
        ModelConfigDialog dialog = new ModelConfigDialog(this,true,configPanel);
        dialog.show();
    }
    
    // ---------------------------------------
    // Functionality for being a ModelChangeListener
    // ---------------------------------------
    /**
     * Function called when a model is changed
     * @param evt A ModelChangeEvent corresponding to this event
     */
    @Override
    public void model_changed(ModelChangeEvent evt)
    {
        // get the model:
        String key = evt.get_key();
        StopPow updated_model = models.get_model(key);
        
        // get access to the table data:
        DefaultTableModel table_data = (DefaultTableModel)model_table.getModel();
        
        // find the key in the table:
        int rows = model_table.getRowCount();
        int index = -1;
        // find it in the table:
        for(int i=0; i < rows; i++)
        {
            String row_key = (String)table_data.getValueAt(0, i);
            if( row_key.equals(key) )
                index = i;
        }
        // sanity check:
        if( index < 0 || index >= rows )
            return;
        
        // make a new row to display:
        Object[] table_row = { key , updated_model.get_type() , updated_model.get_info() };
        
        // update the displayed data in the table:
        table_data.setValueAt( table_row[0] , index, 0);
        table_data.setValueAt( table_row[1] , index, 1);
        table_data.setValueAt( table_row[2] , index, 2);
    }
    
    /**
     * Function called when a model is added
     * @param evt A ModelChangeEvent corresponding to this event
     */
    @Override
    public void model_added(ModelChangeEvent evt)
    {
        // get the model:
        String key = evt.get_key();
        StopPow new_model = models.get_model(key);
        
        // add to the table display:
        // get number of rows:
        int rows = model_table.getRowCount();
        int index = rows+1;
        DefaultTableModel table_data = (DefaultTableModel)model_table.getModel();
        Object[] table_row = { key , new_model.get_type() , new_model.get_info() };
        table_data.addRow( table_row );
    }
    
    /**
     * Function called when a model is deleted
     * @param evt A ModelChangeEvent corresponding to this event
     */
    @Override
    public void model_deleted(ModelChangeEvent evt)
    {
        // get access to underlying table data:
        DefaultTableModel table_data = (DefaultTableModel)model_table.getModel();
        // get number of rows:
        int rows = model_table.getRowCount();
        
        // get the key:
        String key = evt.get_key();
        // where it is in the table:
        int index = -1;
        // find it in the table:
        for(int i=0; i < rows; i++)
        {
            String row_key = (String)table_data.getValueAt(i,0);
            if( row_key.equals(key) )
                index = i;
        }
        
        // sanity check:
        if( index < 0 || index >= rows )
            return;
        
        // remove from displayed table:
        table_data.removeRow(index);
    }
}
