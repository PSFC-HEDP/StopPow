package stoppowgui;

import SciTK.DialogError;
import SciTK.ExtensionFileFilter;
import cStopPow.StopPow;
import cStopPow.StopPow_SRIM;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;

/**
 * A configuration panel for an SRIM stopping power model
 * @date 2013/06/05
 * @author Alex Zylstra
 */
public class ModelConfigPanel_SRIM extends ModelConfigPanel {
    File srim_file;
    
    /**
     * Construct a new model configuration panel for SRIM models.
     * @param models the ModelManager to be used
     */
    public ModelConfigPanel_SRIM(ModelManager models) {
        super(models);
        initComponents();
        
        // add key bindings:
        buttonChooseFile.getInputMap().put(KeyStroke.getKeyStroke("released ENTER"), "Enter");
        buttonChooseFile.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                buttonChooseFileActionPerformed(e);
            }
        });
        buttonCancel.getInputMap().put(KeyStroke.getKeyStroke("released ENTER"), "Enter");
        buttonCancel.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                buttonCancelActionPerformed(e);
            }
        });
        buttonOK.getInputMap().put(KeyStroke.getKeyStroke("released ENTER"), "Enter");
        buttonOK.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                buttonOKActionPerformed(e);
            }
        });
        textfieldName.getInputMap().put(KeyStroke.getKeyStroke("released ENTER"), "Enter");
        textfieldName.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                buttonOKActionPerformed(e);
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        buttonChooseFile = new javax.swing.JButton();
        labelFileName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textfieldName = new javax.swing.JTextField();
        buttonOK = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(260, 140));
        setSize(new java.awt.Dimension(260, 140));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("SRIM File:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 17, -1, -1));

        buttonChooseFile.setText("Choose");
        buttonChooseFile.setMaximumSize(new java.awt.Dimension(90, 30));
        buttonChooseFile.setMinimumSize(new java.awt.Dimension(90, 30));
        buttonChooseFile.setPreferredSize(new java.awt.Dimension(90, 30));
        buttonChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChooseFileActionPerformed(evt);
            }
        });
        add(buttonChooseFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, -1, -1));

        labelFileName.setMaximumSize(new java.awt.Dimension(300, 15));
        labelFileName.setMinimumSize(new java.awt.Dimension(100, 15));
        add(labelFileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 200, 15));

        jLabel2.setText("Name: ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 65, -1, -1));
        add(textfieldName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 150, -1));

        buttonOK.setText("OK");
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });
        add(buttonOK, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 100, -1, -1));

        buttonCancel.setText("Cancel");
        buttonCancel.setMaximumSize(new java.awt.Dimension(75, 29));
        buttonCancel.setMinimumSize(new java.awt.Dimension(75, 29));
        buttonCancel.setPreferredSize(new java.awt.Dimension(75, 29));
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });
        add(buttonCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handle choosing the SRIM file
     * @param evt the ActionEvent triggering this call
     */
    private void buttonChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChooseFileActionPerformed
        // Choose a file:
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new ExtensionFileFilter("txt", new String[] {"txt,TXT"}));
        fc.addChoosableFileFilter(new ExtensionFileFilter("zig", new String[] {"zig,ZIG"}));
        // remove default option:
        fc.setAcceptAllFileFilterUsed(false);
        
        // Select a file using the JFileChooser dialog:
        int fc_return = fc.showOpenDialog(this);
        
        // if the user actually wants to load an SRIM file:
        if( fc_return==JFileChooser.APPROVE_OPTION )
        {
            
            //get the file:
            srim_file = fc.getSelectedFile();
            
            // try to create a new model
            StopPow new_model;
            try
            {
                 new_model = new StopPow_SRIM( srim_file.getAbsolutePath() );
            }
            catch( IOException e )
            {
                DialogError d = new DialogError(this,"Error opening SRIM file." 
                        + '\n' + e.getMessage());
                return;
            }
            
            // set the descriptor string:
            labelFileName.setText( srim_file.getName() );
        }
    }//GEN-LAST:event_buttonChooseFileActionPerformed

    /**
     * Action handler for the Cancel button
     * @param evt the ActionEvent generating this call
     */
    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        dialog.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    /**
     * Action handler for the OK button
     * @param evt the ActionEvent generating this call
     */
    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
        // sanity check:
        if(srim_file == null)
            return;
        
        // get the name, which we require non-empty and unique:
        String name = textfieldName.getText();
        if( name.equals("") )
        {
            // throw error dialogs to help user if necessary:
            DialogError e1 = new DialogError(this," Name cannot be empty! ");
            return;
        }
        
        // try to create a new model
        StopPow new_model;
        try
        {
             new_model = new StopPow_SRIM( srim_file.getAbsolutePath() );
        }
        catch( IOException e )
        {
            DialogError d = new DialogError(this,"Error opening SRIM file." 
                    + '\n' + e.getMessage());
            return;
        }
        
        // Construct an info string array
        // For SRIM, just the file path for now:
        String info = srim_file.getName();
        
        // if the name is unique, add as new model:
        if( !models.containsKey(name) )
        {
            // add to the model manager:
            models.add_model(name,new_model,this);
            previousKey = name;
        }
        else if( editMode && name.equals(previousKey) ) // update existing model
        {
            // update the model manager:
            models.change_model(name, new_model, this);
        }
        else
        {
            DialogError d = new DialogError(this,"Name is not unique!");
            return;
        }
        
        // if the panel is displayed again, we want to be in edit mode:
        editMode = true;
        
        // close the window:
        dialog.dispose();
    }//GEN-LAST:event_buttonOKActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonChooseFile;
    private javax.swing.JButton buttonOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelFileName;
    private javax.swing.JTextField textfieldName;
    // End of variables declaration//GEN-END:variables

    @Override
    public String get_type() {
        return "SRIM";
    }
}
