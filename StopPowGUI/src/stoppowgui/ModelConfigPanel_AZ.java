// StopPow - a charged-particle stopping power library
// Copyright (C) 2014  Massachusetts Institute of Technology / Alex Zylstra

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

package stoppowgui;

import SciTK.DialogError;
import cStopPow.StopPow;
import cStopPow.StopPow_AZ;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;

/**
 * A configuration panel for an Andersen-Ziegler stopping power model
 * @date 2013/06/06
 * @author Alex Zylstra
 */
public class ModelConfigPanel_AZ extends ModelConfigPanel {    
    /**
     * Construct a new model configuration panel for Andersen-Ziegler models.
     * @param models the ModelManager to be used
     */
    public ModelConfigPanel_AZ(ModelManager models) {
        super(models);
        initComponents();
        
        // add key bindings:
        buttonCancel.getInputMap().put(KeyStroke.getKeyStroke("released ENTER"), "Enter");
        buttonCancel.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                buttonCancelActionPerformed(e);
            }
        });
        buttonOK.getInputMap().put(KeyStroke.getKeyStroke("released ENTER"), "Enter");
        buttonOK.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                buttonOKActionPerformed(e);
            }
        });
        nameTextField.getInputMap().put(KeyStroke.getKeyStroke("released ENTER"), "Enter");
        nameTextField.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                buttonOKActionPerformed(e);
            }
        });
        densityTextField.getInputMap().put(KeyStroke.getKeyStroke("released ENTER"), "Enter");
        densityTextField.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                buttonOKActionPerformed(e);
            }
        });
        
        // populate the materials:
        for(int i=1; i <= cStopPow.AtomicData.n; i++)
            materialComboBox.addItem( cStopPow.AtomicData.get_name(i) );
        // start without any selected:
        materialComboBox.setSelectedIndex(-1);
        densityTextField.setText("");
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        buttonOK = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        materialComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        densityTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(260, 150));
        setSize(new java.awt.Dimension(260, 150));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Andersen & Ziegler fits (protons only)");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, -1, -1));

        jLabel2.setText("Name: ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, -1, -1));
        add(nameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 150, -1));

        buttonOK.setText("OK");
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });
        add(buttonOK, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 120, -1, -1));

        buttonCancel.setText("Cancel");
        buttonCancel.setMaximumSize(new java.awt.Dimension(75, 29));
        buttonCancel.setMinimumSize(new java.awt.Dimension(75, 29));
        buttonCancel.setPreferredSize(new java.awt.Dimension(75, 29));
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });
        add(buttonCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, -1, -1));

        jLabel3.setText("Material:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, -1, -1));

        materialComboBox.setPreferredSize(new java.awt.Dimension(120, 27));
        materialComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                materialComboBoxActionPerformed(evt);
            }
        });
        add(materialComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, -1, -1));

        jLabel4.setText("Density:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 65, -1, -1));
        add(densityTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 80, -1));

        jLabel5.setText("g/cc");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 65, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action handler for the Cancel button
     * @param evt the ActionEvent generating this call
     */
    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        dialog.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    /**
     * Action handler for the OK button
     * @param evt the ActionEvent generating this call
     */
    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
        // get the name, which we require non-empty and unique:
        String name = nameTextField.getText();
        if( name.equals("") )
        {
            // throw error dialogs to help user if necessary:
            DialogError e1 = new DialogError(this," Name cannot be empty! ");
            return;
        }
        
        // get the Z and density:
        int Z = cStopPow.AtomicData.get_num_from_name( (String)materialComboBox.getSelectedItem() );
        float rho = Float.parseFloat( densityTextField.getText() );
        // try to create a new model
        StopPow new_model;
        try
        {
             new_model = new StopPow_AZ( Z,rho );
        }
        catch( IllegalArgumentException e )
        {
            DialogError d = new DialogError(this,"Error creating model." 
                    + '\n' + e.getMessage());
            return;
        }
        
        // if the name is unique, add as new model:
        if( !models.containsKey(name) )
        {
            // add to the model manager:
            models.add_model(name,new_model,this);
            previousKey = name;
        }
        else if( editMode && name.equals(previousKey) ) // update existing model
        {
            // update the model manager:
            models.change_model(name, new_model, this);
        }
        else
        {
            DialogError d = new DialogError(this,"Name is not unique!");
            return;
        }
        
        // if the panel is displayed again, we want to be in edit mode:
        editMode = true;
        
        // close the window:
        dialog.dispose();
    }//GEN-LAST:event_buttonOKActionPerformed

    private void materialComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materialComboBoxActionPerformed
        if( materialComboBox.getSelectedIndex() >= 0)
        {
            // automatically update the density
            int Z = cStopPow.AtomicData.get_num_from_name( (String)materialComboBox.getSelectedItem() );
            float rho = cStopPow.AtomicData.get_rho(Z);
            densityTextField.setText( Float.toString(rho) );
        }
    }//GEN-LAST:event_materialComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonOK;
    private javax.swing.JTextField densityTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox materialComboBox;
    private javax.swing.JTextField nameTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public String get_type() {
        return "Andersen-Ziegler";
    }
}
