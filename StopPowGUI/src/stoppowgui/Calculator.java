package stoppowgui;

import java.awt.Component;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;
import java.util.concurrent.ThreadPoolExecutor;

/**
 * Implement a top-level calculator window.
 * This class implements generic UI and also creates several
 * CalculatorPanels which take care of the actual calculations.
 * @class Calculator
 * @author Alex Zylstra
 * @date 2013/05/18
 */
public class Calculator extends JFrame implements ModelChangeListener 
{
    /** The ModelManager being used by this application */
    private ModelManager models;
    /** The parent window of this class, ie the main window. */
    private JFrame parent;
    /** Store CalculatorPanels in a Map */
    private Map<String,CalculatorPanel> panels;
    /** The StopPowGUI application keeps a pool of threads for calculations */
    protected ThreadPoolExecutor exec;
    
    /**
     * Creates new Calculator window
     */
    public Calculator(JFrame parent, ModelManager m, ThreadPoolExecutor calcPool) {
        // set the ThreadPool (for running potentially intensive calculations):
        exec = calcPool;
        
        // save the class model manager, add add this Calculator
        // as a listener for changes:
        models = m;
        models.addModelChangeListener(this);
        
        // set up the GUI:
        initComponents();
        
        // make sure we show all models:
        modelComboBox.removeAllItems();
        for(String s : models.get_keys())
        {
            modelComboBox.addItem(s);
        }
        // but don't have any selected:
        modelComboBox.setSelectedItem(null);
        
        // -----------------------------------
        // Set up all panels and store locally
        // -----------------------------------
        panels = new HashMap<String,CalculatorPanel>();
        panels.put( "dE/dx", new CalculatorPaneldEdx( null, models, exec ) );
        panels.put( "Shift", new CalculatorPanelShift( null, models, exec ) );
        panels.put( "Range", new CalculatorPanelRange( null, models, exec ) );
        
        // now add all panel types to the GUI:
        for( String s : panels.keySet() )
            typeComboBox.addItem(s);
        
        // some JFrame stuff:
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        modelComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setMinimumSize(new java.awt.Dimension(433, 300));

        jLabel1.setText("Type: ");

        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Model: ");

        modelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelComboBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 84, Short.MAX_VALUE)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(typeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(40, 40, 40)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(modelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 85, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(typeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(modelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        // Get info about the event:
        int i = typeComboBox.getSelectedIndex();
        String s = (String)typeComboBox.getItemAt(i);
        
        // update the GUI based on which item is selected:
        selectPanel(s);
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void modelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelComboBoxActionPerformed
        selectModel();
    }//GEN-LAST:event_modelComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox modelComboBox;
    private javax.swing.JComboBox typeComboBox;
    // End of variables declaration//GEN-END:variables

    // ---------------------------------------
    //     Listen for changes in models
    // ---------------------------------------
    /**
     * Function called when a model is changed
     * @param evt A ModelChangeEvent corresponding to this event
     */
    @Override
    public void model_changed(ModelChangeEvent evt)
    {
        // get model changed:
        String key = evt.get_key();
        // get model selected:
        int modelIndex = modelComboBox.getSelectedIndex();
        String modelName = (String)modelComboBox.getItemAt(modelIndex);
        
        // if we are using the model that was changed, then update
        // all panels:
        if( modelName.equals(key) )
        {
            // iterate over all CalculatorPanels and update their model
            for( CalculatorPanel i : panels.values() )
                exec.execute(i); // run in thread via ThreadPool
        }
    }
    
    /**
     * Function called when a model is added
     * @param evt A ModelChangeEvent corresponding to this event
     */
    @Override
    public void model_added(ModelChangeEvent evt)
    {
        modelComboBox.addItem( evt.get_key() );
    }
    
    /**
     * Function called when a model is deleted
     * @param evt A ModelChangeEvent corresponding to this event
     */
    @Override
    public void model_deleted(ModelChangeEvent evt)
    {
        // get key of the model deleted:
        String deletedModel = evt.get_key();
        
        // find index:
        int index = -1; // if not found in combo box, remains -1
        for(int i=0; i < modelComboBox.getItemCount(); i++)
        {
            if( deletedModel.equals(modelComboBox.getItemAt(i)) )
                index = i;
        }
        
        // check if it is selected:
        if( index >= 0 )
        {
            modelComboBox.removeItem(deletedModel);
            // clear selection:
            modelComboBox.setSelectedItem(null);
            
            // remove results for all panels if the model was just deleted:
            for( CalculatorPanel i : panels.values() )
                i.clearResults();
            
        }
    }
    
    /**
     * Select panel based off of a drop-down menu.
     * @param s The key String for looking up the panel we want
     */
    private void selectPanel(String s) {
        // Get the panel from the Map:
        CalculatorPanel p = (CalculatorPanel)panels.get(s);
        jScrollPane1.getViewport().setView((Component)p);
        
    }
    
    /**
     * Select the model to be used for calculations, and update
     * the panels.
     */
    private void selectModel()
    {
        if( panels == null || models == null )
            return;
        
        // get the model to use:
        int modelIndex = modelComboBox.getSelectedIndex();
        String modelName = (String)modelComboBox.getItemAt(modelIndex);
        
        // iterate over all CalculatorPanels and update their model
        for( CalculatorPanel i : panels.values() )
            i.updateModel(modelName);
    }
}
