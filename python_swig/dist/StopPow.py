# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StopPow', [dirname(__file__)])
        except ImportError:
            import _StopPow
            return _StopPow
        if fp is not None:
            try:
                _mod = imp.load_module('_StopPow', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StopPow = swig_import_helper()
    del swig_import_helper
else:
    import _StopPow
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_intp():
  return _StopPow.new_intp()
new_intp = _StopPow.new_intp

def copy_intp(*args):
  return _StopPow.copy_intp(*args)
copy_intp = _StopPow.copy_intp

def delete_intp(*args):
  return _StopPow.delete_intp(*args)
delete_intp = _StopPow.delete_intp

def intp_assign(*args):
  return _StopPow.intp_assign(*args)
intp_assign = _StopPow.intp_assign

def intp_value(*args):
  return _StopPow.intp_value(*args)
intp_value = _StopPow.intp_value

def new_floatp():
  return _StopPow.new_floatp()
new_floatp = _StopPow.new_floatp

def copy_floatp(*args):
  return _StopPow.copy_floatp(*args)
copy_floatp = _StopPow.copy_floatp

def delete_floatp(*args):
  return _StopPow.delete_floatp(*args)
delete_floatp = _StopPow.delete_floatp

def floatp_assign(*args):
  return _StopPow.floatp_assign(*args)
floatp_assign = _StopPow.floatp_assign

def floatp_value(*args):
  return _StopPow.floatp_value(*args)
floatp_value = _StopPow.floatp_value

def new_doublep():
  return _StopPow.new_doublep()
new_doublep = _StopPow.new_doublep

def copy_doublep(*args):
  return _StopPow.copy_doublep(*args)
copy_doublep = _StopPow.copy_doublep

def delete_doublep(*args):
  return _StopPow.delete_doublep(*args)
delete_doublep = _StopPow.delete_doublep

def doublep_assign(*args):
  return _StopPow.doublep_assign(*args)
doublep_assign = _StopPow.doublep_assign

def doublep_value(*args):
  return _StopPow.doublep_value(*args)
doublep_value = _StopPow.doublep_value
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StopPow.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _StopPow.SwigPyIterator_value(self)
    def incr(self, n=1): return _StopPow.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _StopPow.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _StopPow.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _StopPow.SwigPyIterator_equal(self, *args)
    def copy(self): return _StopPow.SwigPyIterator_copy(self)
    def next(self): return _StopPow.SwigPyIterator_next(self)
    def __next__(self): return _StopPow.SwigPyIterator___next__(self)
    def previous(self): return _StopPow.SwigPyIterator_previous(self)
    def advance(self, *args): return _StopPow.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _StopPow.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _StopPow.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _StopPow.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _StopPow.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _StopPow.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _StopPow.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _StopPow.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _StopPow.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _StopPow.IntVector___nonzero__(self)
    def __bool__(self): return _StopPow.IntVector___bool__(self)
    def __len__(self): return _StopPow.IntVector___len__(self)
    def pop(self): return _StopPow.IntVector_pop(self)
    def __getslice__(self, *args): return _StopPow.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _StopPow.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _StopPow.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _StopPow.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _StopPow.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _StopPow.IntVector___setitem__(self, *args)
    def append(self, *args): return _StopPow.IntVector_append(self, *args)
    def empty(self): return _StopPow.IntVector_empty(self)
    def size(self): return _StopPow.IntVector_size(self)
    def clear(self): return _StopPow.IntVector_clear(self)
    def swap(self, *args): return _StopPow.IntVector_swap(self, *args)
    def get_allocator(self): return _StopPow.IntVector_get_allocator(self)
    def begin(self): return _StopPow.IntVector_begin(self)
    def end(self): return _StopPow.IntVector_end(self)
    def rbegin(self): return _StopPow.IntVector_rbegin(self)
    def rend(self): return _StopPow.IntVector_rend(self)
    def pop_back(self): return _StopPow.IntVector_pop_back(self)
    def erase(self, *args): return _StopPow.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _StopPow.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _StopPow.IntVector_push_back(self, *args)
    def front(self): return _StopPow.IntVector_front(self)
    def back(self): return _StopPow.IntVector_back(self)
    def assign(self, *args): return _StopPow.IntVector_assign(self, *args)
    def resize(self, *args): return _StopPow.IntVector_resize(self, *args)
    def insert(self, *args): return _StopPow.IntVector_insert(self, *args)
    def reserve(self, *args): return _StopPow.IntVector_reserve(self, *args)
    def capacity(self): return _StopPow.IntVector_capacity(self)
    __swig_destroy__ = _StopPow.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _StopPow.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _StopPow.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _StopPow.FloatVector___nonzero__(self)
    def __bool__(self): return _StopPow.FloatVector___bool__(self)
    def __len__(self): return _StopPow.FloatVector___len__(self)
    def pop(self): return _StopPow.FloatVector_pop(self)
    def __getslice__(self, *args): return _StopPow.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _StopPow.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _StopPow.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _StopPow.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _StopPow.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _StopPow.FloatVector___setitem__(self, *args)
    def append(self, *args): return _StopPow.FloatVector_append(self, *args)
    def empty(self): return _StopPow.FloatVector_empty(self)
    def size(self): return _StopPow.FloatVector_size(self)
    def clear(self): return _StopPow.FloatVector_clear(self)
    def swap(self, *args): return _StopPow.FloatVector_swap(self, *args)
    def get_allocator(self): return _StopPow.FloatVector_get_allocator(self)
    def begin(self): return _StopPow.FloatVector_begin(self)
    def end(self): return _StopPow.FloatVector_end(self)
    def rbegin(self): return _StopPow.FloatVector_rbegin(self)
    def rend(self): return _StopPow.FloatVector_rend(self)
    def pop_back(self): return _StopPow.FloatVector_pop_back(self)
    def erase(self, *args): return _StopPow.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _StopPow.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _StopPow.FloatVector_push_back(self, *args)
    def front(self): return _StopPow.FloatVector_front(self)
    def back(self): return _StopPow.FloatVector_back(self)
    def assign(self, *args): return _StopPow.FloatVector_assign(self, *args)
    def resize(self, *args): return _StopPow.FloatVector_resize(self, *args)
    def insert(self, *args): return _StopPow.FloatVector_insert(self, *args)
    def reserve(self, *args): return _StopPow.FloatVector_reserve(self, *args)
    def capacity(self): return _StopPow.FloatVector_capacity(self)
    __swig_destroy__ = _StopPow.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _StopPow.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector2D, name)
    __repr__ = _swig_repr
    def iterator(self): return _StopPow.FloatVector2D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _StopPow.FloatVector2D___nonzero__(self)
    def __bool__(self): return _StopPow.FloatVector2D___bool__(self)
    def __len__(self): return _StopPow.FloatVector2D___len__(self)
    def pop(self): return _StopPow.FloatVector2D_pop(self)
    def __getslice__(self, *args): return _StopPow.FloatVector2D___getslice__(self, *args)
    def __setslice__(self, *args): return _StopPow.FloatVector2D___setslice__(self, *args)
    def __delslice__(self, *args): return _StopPow.FloatVector2D___delslice__(self, *args)
    def __delitem__(self, *args): return _StopPow.FloatVector2D___delitem__(self, *args)
    def __getitem__(self, *args): return _StopPow.FloatVector2D___getitem__(self, *args)
    def __setitem__(self, *args): return _StopPow.FloatVector2D___setitem__(self, *args)
    def append(self, *args): return _StopPow.FloatVector2D_append(self, *args)
    def empty(self): return _StopPow.FloatVector2D_empty(self)
    def size(self): return _StopPow.FloatVector2D_size(self)
    def clear(self): return _StopPow.FloatVector2D_clear(self)
    def swap(self, *args): return _StopPow.FloatVector2D_swap(self, *args)
    def get_allocator(self): return _StopPow.FloatVector2D_get_allocator(self)
    def begin(self): return _StopPow.FloatVector2D_begin(self)
    def end(self): return _StopPow.FloatVector2D_end(self)
    def rbegin(self): return _StopPow.FloatVector2D_rbegin(self)
    def rend(self): return _StopPow.FloatVector2D_rend(self)
    def pop_back(self): return _StopPow.FloatVector2D_pop_back(self)
    def erase(self, *args): return _StopPow.FloatVector2D_erase(self, *args)
    def __init__(self, *args): 
        this = _StopPow.new_FloatVector2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _StopPow.FloatVector2D_push_back(self, *args)
    def front(self): return _StopPow.FloatVector2D_front(self)
    def back(self): return _StopPow.FloatVector2D_back(self)
    def assign(self, *args): return _StopPow.FloatVector2D_assign(self, *args)
    def resize(self, *args): return _StopPow.FloatVector2D_resize(self, *args)
    def insert(self, *args): return _StopPow.FloatVector2D_insert(self, *args)
    def reserve(self, *args): return _StopPow.FloatVector2D_reserve(self, *args)
    def capacity(self): return _StopPow.FloatVector2D_capacity(self)
    __swig_destroy__ = _StopPow.delete_FloatVector2D
    __del__ = lambda self : None;
FloatVector2D_swigregister = _StopPow.FloatVector2D_swigregister
FloatVector2D_swigregister(FloatVector2D)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _StopPow.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _StopPow.DoubleVector___nonzero__(self)
    def __bool__(self): return _StopPow.DoubleVector___bool__(self)
    def __len__(self): return _StopPow.DoubleVector___len__(self)
    def pop(self): return _StopPow.DoubleVector_pop(self)
    def __getslice__(self, *args): return _StopPow.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _StopPow.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _StopPow.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _StopPow.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _StopPow.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _StopPow.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _StopPow.DoubleVector_append(self, *args)
    def empty(self): return _StopPow.DoubleVector_empty(self)
    def size(self): return _StopPow.DoubleVector_size(self)
    def clear(self): return _StopPow.DoubleVector_clear(self)
    def swap(self, *args): return _StopPow.DoubleVector_swap(self, *args)
    def get_allocator(self): return _StopPow.DoubleVector_get_allocator(self)
    def begin(self): return _StopPow.DoubleVector_begin(self)
    def end(self): return _StopPow.DoubleVector_end(self)
    def rbegin(self): return _StopPow.DoubleVector_rbegin(self)
    def rend(self): return _StopPow.DoubleVector_rend(self)
    def pop_back(self): return _StopPow.DoubleVector_pop_back(self)
    def erase(self, *args): return _StopPow.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _StopPow.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _StopPow.DoubleVector_push_back(self, *args)
    def front(self): return _StopPow.DoubleVector_front(self)
    def back(self): return _StopPow.DoubleVector_back(self)
    def assign(self, *args): return _StopPow.DoubleVector_assign(self, *args)
    def resize(self, *args): return _StopPow.DoubleVector_resize(self, *args)
    def insert(self, *args): return _StopPow.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _StopPow.DoubleVector_reserve(self, *args)
    def capacity(self): return _StopPow.DoubleVector_capacity(self)
    __swig_destroy__ = _StopPow.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _StopPow.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2D, name)
    __repr__ = _swig_repr
    def iterator(self): return _StopPow.DoubleVector2D_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _StopPow.DoubleVector2D___nonzero__(self)
    def __bool__(self): return _StopPow.DoubleVector2D___bool__(self)
    def __len__(self): return _StopPow.DoubleVector2D___len__(self)
    def pop(self): return _StopPow.DoubleVector2D_pop(self)
    def __getslice__(self, *args): return _StopPow.DoubleVector2D___getslice__(self, *args)
    def __setslice__(self, *args): return _StopPow.DoubleVector2D___setslice__(self, *args)
    def __delslice__(self, *args): return _StopPow.DoubleVector2D___delslice__(self, *args)
    def __delitem__(self, *args): return _StopPow.DoubleVector2D___delitem__(self, *args)
    def __getitem__(self, *args): return _StopPow.DoubleVector2D___getitem__(self, *args)
    def __setitem__(self, *args): return _StopPow.DoubleVector2D___setitem__(self, *args)
    def append(self, *args): return _StopPow.DoubleVector2D_append(self, *args)
    def empty(self): return _StopPow.DoubleVector2D_empty(self)
    def size(self): return _StopPow.DoubleVector2D_size(self)
    def clear(self): return _StopPow.DoubleVector2D_clear(self)
    def swap(self, *args): return _StopPow.DoubleVector2D_swap(self, *args)
    def get_allocator(self): return _StopPow.DoubleVector2D_get_allocator(self)
    def begin(self): return _StopPow.DoubleVector2D_begin(self)
    def end(self): return _StopPow.DoubleVector2D_end(self)
    def rbegin(self): return _StopPow.DoubleVector2D_rbegin(self)
    def rend(self): return _StopPow.DoubleVector2D_rend(self)
    def pop_back(self): return _StopPow.DoubleVector2D_pop_back(self)
    def erase(self, *args): return _StopPow.DoubleVector2D_erase(self, *args)
    def __init__(self, *args): 
        this = _StopPow.new_DoubleVector2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _StopPow.DoubleVector2D_push_back(self, *args)
    def front(self): return _StopPow.DoubleVector2D_front(self)
    def back(self): return _StopPow.DoubleVector2D_back(self)
    def assign(self, *args): return _StopPow.DoubleVector2D_assign(self, *args)
    def resize(self, *args): return _StopPow.DoubleVector2D_resize(self, *args)
    def insert(self, *args): return _StopPow.DoubleVector2D_insert(self, *args)
    def reserve(self, *args): return _StopPow.DoubleVector2D_reserve(self, *args)
    def capacity(self): return _StopPow.DoubleVector2D_capacity(self)
    __swig_destroy__ = _StopPow.delete_DoubleVector2D
    __del__ = lambda self : None;
DoubleVector2D_swigregister = _StopPow.DoubleVector2D_swigregister
DoubleVector2D_swigregister(DoubleVector2D)

class StopPow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def dEdx_MeV_um(self, *args): return _StopPow.StopPow_dEdx_MeV_um(self, *args)
    def dEdx_MeV_mgcm2(self, *args): return _StopPow.StopPow_dEdx_MeV_mgcm2(self, *args)
    def get_Emin(self): return _StopPow.StopPow_get_Emin(self)
    def get_Emax(self): return _StopPow.StopPow_get_Emax(self)
    def get_type(self): return _StopPow.StopPow_get_type(self)
    def get_info(self): return _StopPow.StopPow_get_info(self)
    def dEdx(self, *args): return _StopPow.StopPow_dEdx(self, *args)
    def Eout(self, *args): return _StopPow.StopPow_Eout(self, *args)
    def Ein(self, *args): return _StopPow.StopPow_Ein(self, *args)
    def Thickness(self, *args): return _StopPow.StopPow_Thickness(self, *args)
    def Range(self, *args): return _StopPow.StopPow_Range(self, *args)
    def get_dx(self): return _StopPow.StopPow_get_dx(self)
    def set_dx(self, *args): return _StopPow.StopPow_set_dx(self, *args)
    def get_mode(self): return _StopPow.StopPow_get_mode(self)
    def set_mode(self, *args): return _StopPow.StopPow_set_mode(self, *args)
    __swig_destroy__ = _StopPow.delete_StopPow
    __del__ = lambda self : None;
StopPow_swigregister = _StopPow.StopPow_swigregister
StopPow_swigregister(StopPow)
cvar = _StopPow.cvar
StopPow.DEFAULT_DX = _StopPow.cvar.StopPow_DEFAULT_DX
StopPow.DEFAULT_DRHOR = _StopPow.cvar.StopPow_DEFAULT_DRHOR
StopPow.MODE_LENGTH = _StopPow.cvar.StopPow_MODE_LENGTH
StopPow.MODE_RHOR = _StopPow.cvar.StopPow_MODE_RHOR

class StopPow_Plasma(StopPow):
    __swig_setmethods__ = {}
    for _s in [StopPow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_Plasma, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_Plasma, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StopPow.delete_StopPow_Plasma
    __del__ = lambda self : None;
    def set_particle(self, *args): return _StopPow.StopPow_Plasma_set_particle(self, *args)
    def set_field(self, *args): return _StopPow.StopPow_Plasma_set_field(self, *args)
StopPow_Plasma_swigregister = _StopPow.StopPow_Plasma_swigregister
StopPow_Plasma_swigregister(StopPow_Plasma)

class StopPow_PartialIoniz(StopPow):
    __swig_setmethods__ = {}
    for _s in [StopPow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_PartialIoniz, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_PartialIoniz, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StopPow.delete_StopPow_PartialIoniz
    __del__ = lambda self : None;
    def set_particle(self, *args): return _StopPow.StopPow_PartialIoniz_set_particle(self, *args)
    def set_field(self, *args): return _StopPow.StopPow_PartialIoniz_set_field(self, *args)
StopPow_PartialIoniz_swigregister = _StopPow.StopPow_PartialIoniz_swigregister
StopPow_PartialIoniz_swigregister(StopPow_PartialIoniz)

class StopPow_SRIM(StopPow):
    __swig_setmethods__ = {}
    for _s in [StopPow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_SRIM, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_SRIM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _StopPow.new_StopPow_SRIM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _StopPow.delete_StopPow_SRIM
    __del__ = lambda self : None;
    def dEdx_MeV_um(self, *args): return _StopPow.StopPow_SRIM_dEdx_MeV_um(self, *args)
    def dEdx_MeV_mgcm2(self, *args): return _StopPow.StopPow_SRIM_dEdx_MeV_mgcm2(self, *args)
    def get_Emin(self): return _StopPow.StopPow_SRIM_get_Emin(self)
    def get_Emax(self): return _StopPow.StopPow_SRIM_get_Emax(self)
StopPow_SRIM_swigregister = _StopPow.StopPow_SRIM_swigregister
StopPow_SRIM_swigregister(StopPow_SRIM)

class StopPow_LP(StopPow_Plasma):
    __swig_setmethods__ = {}
    for _s in [StopPow_Plasma]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_LP, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow_Plasma]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_LP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _StopPow.new_StopPow_LP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _StopPow.delete_StopPow_LP
    __del__ = lambda self : None;
    def dEdx_MeV_um(self, *args): return _StopPow.StopPow_LP_dEdx_MeV_um(self, *args)
    def dEdx_MeV_mgcm2(self, *args): return _StopPow.StopPow_LP_dEdx_MeV_mgcm2(self, *args)
    def set_collective(self, *args): return _StopPow.StopPow_LP_set_collective(self, *args)
    def set_quantum(self, *args): return _StopPow.StopPow_LP_set_quantum(self, *args)
    def set_xtf_factor(self, *args): return _StopPow.StopPow_LP_set_xtf_factor(self, *args)
    def set_xtf_collective_factor(self, *args): return _StopPow.StopPow_LP_set_xtf_collective_factor(self, *args)
    def set_u_factor(self, *args): return _StopPow.StopPow_LP_set_u_factor(self, *args)
    def get_Emin(self): return _StopPow.StopPow_LP_get_Emin(self)
    def get_Emax(self): return _StopPow.StopPow_LP_get_Emax(self)
StopPow_LP_swigregister = _StopPow.StopPow_LP_swigregister
StopPow_LP_swigregister(StopPow_LP)

class StopPow_BetheBloch(StopPow):
    __swig_setmethods__ = {}
    for _s in [StopPow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_BetheBloch, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_BetheBloch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _StopPow.new_StopPow_BetheBloch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _StopPow.delete_StopPow_BetheBloch
    __del__ = lambda self : None;
    def dEdx_MeV_um(self, *args): return _StopPow.StopPow_BetheBloch_dEdx_MeV_um(self, *args)
    def dEdx_MeV_mgcm2(self, *args): return _StopPow.StopPow_BetheBloch_dEdx_MeV_mgcm2(self, *args)
    def get_Emin(self): return _StopPow.StopPow_BetheBloch_get_Emin(self)
    def get_Emax(self): return _StopPow.StopPow_BetheBloch_get_Emax(self)
    def use_shell_correction(self, *args): return _StopPow.StopPow_BetheBloch_use_shell_correction(self, *args)
    def using_shell_correction(self): return _StopPow.StopPow_BetheBloch_using_shell_correction(self)
    def set_Ibar(self, *args): return _StopPow.StopPow_BetheBloch_set_Ibar(self, *args)
    def Ibar(self, *args): return _StopPow.StopPow_BetheBloch_Ibar(self, *args)
StopPow_BetheBloch_swigregister = _StopPow.StopPow_BetheBloch_swigregister
StopPow_BetheBloch_swigregister(StopPow_BetheBloch)

class StopPow_AZ(StopPow):
    __swig_setmethods__ = {}
    for _s in [StopPow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_AZ, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_AZ, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _StopPow.new_StopPow_AZ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _StopPow.delete_StopPow_AZ
    __del__ = lambda self : None;
    def dEdx_MeV_um(self, *args): return _StopPow.StopPow_AZ_dEdx_MeV_um(self, *args)
    def dEdx_MeV_mgcm2(self, *args): return _StopPow.StopPow_AZ_dEdx_MeV_mgcm2(self, *args)
    def get_Emin(self): return _StopPow.StopPow_AZ_get_Emin(self)
    def get_Emax(self): return _StopPow.StopPow_AZ_get_Emax(self)
StopPow_AZ_swigregister = _StopPow.StopPow_AZ_swigregister
StopPow_AZ_swigregister(StopPow_AZ)

class StopPow_Mehlhorn(StopPow_PartialIoniz):
    __swig_setmethods__ = {}
    for _s in [StopPow_PartialIoniz]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_Mehlhorn, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow_PartialIoniz]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_Mehlhorn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _StopPow.new_StopPow_Mehlhorn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _StopPow.delete_StopPow_Mehlhorn
    __del__ = lambda self : None;
    def dEdx_MeV_um(self, *args): return _StopPow.StopPow_Mehlhorn_dEdx_MeV_um(self, *args)
    def dEdx_MeV_mgcm2(self, *args): return _StopPow.StopPow_Mehlhorn_dEdx_MeV_mgcm2(self, *args)
    def get_Emin(self): return _StopPow.StopPow_Mehlhorn_get_Emin(self)
    def get_Emax(self): return _StopPow.StopPow_Mehlhorn_get_Emax(self)
    def Ibar(self, *args): return _StopPow.StopPow_Mehlhorn_Ibar(self, *args)
    def set_Ibar(self, *args): return _StopPow.StopPow_Mehlhorn_set_Ibar(self, *args)
StopPow_Mehlhorn_swigregister = _StopPow.StopPow_Mehlhorn_swigregister
StopPow_Mehlhorn_swigregister(StopPow_Mehlhorn)

class StopPow_Grabowski(StopPow_Plasma):
    __swig_setmethods__ = {}
    for _s in [StopPow_Plasma]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_Grabowski, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow_Plasma]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_Grabowski, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _StopPow.new_StopPow_Grabowski(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _StopPow.delete_StopPow_Grabowski
    __del__ = lambda self : None;
    def dEdx_MeV_um(self, *args): return _StopPow.StopPow_Grabowski_dEdx_MeV_um(self, *args)
    def dEdx_MeV_mgcm2(self, *args): return _StopPow.StopPow_Grabowski_dEdx_MeV_mgcm2(self, *args)
    def get_Emin(self): return _StopPow.StopPow_Grabowski_get_Emin(self)
    def get_Emax(self): return _StopPow.StopPow_Grabowski_get_Emax(self)
StopPow_Grabowski_swigregister = _StopPow.StopPow_Grabowski_swigregister
StopPow_Grabowski_swigregister(StopPow_Grabowski)

class StopPow_Zimmerman(StopPow_PartialIoniz):
    __swig_setmethods__ = {}
    for _s in [StopPow_PartialIoniz]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_Zimmerman, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow_PartialIoniz]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_Zimmerman, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _StopPow.new_StopPow_Zimmerman(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _StopPow.delete_StopPow_Zimmerman
    __del__ = lambda self : None;
    def dEdx_MeV_um(self, *args): return _StopPow.StopPow_Zimmerman_dEdx_MeV_um(self, *args)
    def dEdx_MeV_mgcm2(self, *args): return _StopPow.StopPow_Zimmerman_dEdx_MeV_mgcm2(self, *args)
    def get_Emin(self): return _StopPow.StopPow_Zimmerman_get_Emin(self)
    def get_Emax(self): return _StopPow.StopPow_Zimmerman_get_Emax(self)
    def dEdx_free_electron(self, *args): return _StopPow.StopPow_Zimmerman_dEdx_free_electron(self, *args)
    def dEdx_bound_electron(self, *args): return _StopPow.StopPow_Zimmerman_dEdx_bound_electron(self, *args)
    def dEdx_ion(self, *args): return _StopPow.StopPow_Zimmerman_dEdx_ion(self, *args)
    def set_quantum(self, *args): return _StopPow.StopPow_Zimmerman_set_quantum(self, *args)
StopPow_Zimmerman_swigregister = _StopPow.StopPow_Zimmerman_swigregister
StopPow_Zimmerman_swigregister(StopPow_Zimmerman)

class StopPow_BPS(StopPow_Plasma):
    __swig_setmethods__ = {}
    for _s in [StopPow_Plasma]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPow_BPS, name, value)
    __swig_getmethods__ = {}
    for _s in [StopPow_Plasma]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPow_BPS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _StopPow.new_StopPow_BPS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _StopPow.delete_StopPow_BPS
    __del__ = lambda self : None;
    def dEdx_MeV_um(self, *args): return _StopPow.StopPow_BPS_dEdx_MeV_um(self, *args)
    def dEdx_MeV_mgcm2(self, *args): return _StopPow.StopPow_BPS_dEdx_MeV_mgcm2(self, *args)
    def dEdx_short(self, *args): return _StopPow.StopPow_BPS_dEdx_short(self, *args)
    def dEdx_long(self, *args): return _StopPow.StopPow_BPS_dEdx_long(self, *args)
    def dEdx_quantum(self, *args): return _StopPow.StopPow_BPS_dEdx_quantum(self, *args)
    def get_Emin(self): return _StopPow.StopPow_BPS_get_Emin(self)
    def get_Emax(self): return _StopPow.StopPow_BPS_get_Emax(self)
StopPow_BPS_swigregister = _StopPow.StopPow_BPS_swigregister
StopPow_BPS_swigregister(StopPow_BPS)

class AtomicData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomicData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomicData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get_AMU"] = lambda x: _StopPow.AtomicData_get_AMU
    if _newclass:get_AMU = staticmethod(_StopPow.AtomicData_get_AMU)
    __swig_getmethods__["get_rho"] = lambda x: _StopPow.AtomicData_get_rho
    if _newclass:get_rho = staticmethod(_StopPow.AtomicData_get_rho)
    __swig_getmethods__["get_symbol"] = lambda x: _StopPow.AtomicData_get_symbol
    if _newclass:get_symbol = staticmethod(_StopPow.AtomicData_get_symbol)
    __swig_getmethods__["get_num_from_symbol"] = lambda x: _StopPow.AtomicData_get_num_from_symbol
    if _newclass:get_num_from_symbol = staticmethod(_StopPow.AtomicData_get_num_from_symbol)
    __swig_getmethods__["get_name"] = lambda x: _StopPow.AtomicData_get_name
    if _newclass:get_name = staticmethod(_StopPow.AtomicData_get_name)
    __swig_getmethods__["get_num_from_name"] = lambda x: _StopPow.AtomicData_get_num_from_name
    if _newclass:get_num_from_name = staticmethod(_StopPow.AtomicData_get_num_from_name)
    __swig_getmethods__["get_mean_ionization"] = lambda x: _StopPow.AtomicData_get_mean_ionization
    if _newclass:get_mean_ionization = staticmethod(_StopPow.AtomicData_get_mean_ionization)
    __swig_getmethods__["get_shell_coeff"] = lambda x: _StopPow.AtomicData_get_shell_coeff
    if _newclass:get_shell_coeff = staticmethod(_StopPow.AtomicData_get_shell_coeff)
    n = _StopPow.AtomicData_n
    def __init__(self): 
        this = _StopPow.new_AtomicData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _StopPow.delete_AtomicData
    __del__ = lambda self : None;
AtomicData_swigregister = _StopPow.AtomicData_swigregister
AtomicData_swigregister(AtomicData)

def AtomicData_get_AMU(*args):
  return _StopPow.AtomicData_get_AMU(*args)
AtomicData_get_AMU = _StopPow.AtomicData_get_AMU

def AtomicData_get_rho(*args):
  return _StopPow.AtomicData_get_rho(*args)
AtomicData_get_rho = _StopPow.AtomicData_get_rho

def AtomicData_get_symbol(*args):
  return _StopPow.AtomicData_get_symbol(*args)
AtomicData_get_symbol = _StopPow.AtomicData_get_symbol

def AtomicData_get_num_from_symbol(*args):
  return _StopPow.AtomicData_get_num_from_symbol(*args)
AtomicData_get_num_from_symbol = _StopPow.AtomicData_get_num_from_symbol

def AtomicData_get_name(*args):
  return _StopPow.AtomicData_get_name(*args)
AtomicData_get_name = _StopPow.AtomicData_get_name

def AtomicData_get_num_from_name(*args):
  return _StopPow.AtomicData_get_num_from_name(*args)
AtomicData_get_num_from_name = _StopPow.AtomicData_get_num_from_name

def AtomicData_get_mean_ionization(*args):
  return _StopPow.AtomicData_get_mean_ionization(*args)
AtomicData_get_mean_ionization = _StopPow.AtomicData_get_mean_ionization

def AtomicData_get_shell_coeff(*args):
  return _StopPow.AtomicData_get_shell_coeff(*args)
AtomicData_get_shell_coeff = _StopPow.AtomicData_get_shell_coeff


def get_dEdx_vs_E(*args):
  return _StopPow.get_dEdx_vs_E(*args)
get_dEdx_vs_E = _StopPow.get_dEdx_vs_E

def get_Range_vs_E(*args):
  return _StopPow.get_Range_vs_E(*args)
get_Range_vs_E = _StopPow.get_Range_vs_E

def get_Eout_vs_Ein(*args):
  return _StopPow.get_Eout_vs_Ein(*args)
get_Eout_vs_Ein = _StopPow.get_Eout_vs_Ein

def get_Eout_vs_Thickness(*args):
  return _StopPow.get_Eout_vs_Thickness(*args)
get_Eout_vs_Thickness = _StopPow.get_Eout_vs_Thickness

def get_Ein_vs_Eout(*args):
  return _StopPow.get_Ein_vs_Eout(*args)
get_Ein_vs_Eout = _StopPow.get_Ein_vs_Eout

def get_Ein_vs_Thickness(*args):
  return _StopPow.get_Ein_vs_Thickness(*args)
get_Ein_vs_Thickness = _StopPow.get_Ein_vs_Thickness

def get_Thickness_vs_Eout(*args):
  return _StopPow.get_Thickness_vs_Eout(*args)
get_Thickness_vs_Eout = _StopPow.get_Thickness_vs_Eout

def get_Thickness_vs_Ein(*args):
  return _StopPow.get_Thickness_vs_Ein(*args)
get_Thickness_vs_Ein = _StopPow.get_Thickness_vs_Ein

def shift(*args):
  return _StopPow.shift(*args)
shift = _StopPow.shift
# This file is compatible with both classic and new-style classes.

PLOT_DEFAULT_NUM_POINTS = cvar.PLOT_DEFAULT_NUM_POINTS

