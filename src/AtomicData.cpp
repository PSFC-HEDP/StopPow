
#include "AtomicData.h"

namespace StopPow {

// atomic mass data
const std::array<double,AtomicData::n> AtomicData::AMU = 
	{{1.008,
	4.002602,
	6.94,
	9.012182,
	10.81,
	12.011,
	14.007,
	15.999,
	18.9984032,
	20.1797,
	22.98976928,
	24.305,
	26.9815386,
	28.085,
	30.973762,
	32.06,
	35.45,
	39.948,
	39.0983,
	40.078,
	44.955912,
	47.867,
	50.9415,
	51.9961,
	54.938045,
	55.845,
	58.933195,
	58.6934,
	63.546,
	65.38,
	69.723,
	72.63,
	74.9216,
	78.96,
	79.904,
	83.798,
	85.4678,
	87.62,
	88.90585,
	91.224,
	92.90638,
	95.96,
	98,
	101.07,
	102.9055,
	106.42,
	107.8682,
	112.411,
	114.818,
	118.71,
	121.76,
	127.6,
	126.90447,
	131.293,
	132.9054519,
	137.327,
	138.90547,
	140.116,
	140.90765,
	144.242,
	145,
	150.36,
	151.964,
	157.25,
	158.92535,
	162.5,
	164.93032,
	167.259,
	168.93421,
	173.054,
	174.9668,
	178.49,
	180.94788,
	183.84,
	186.207,
	190.23,
	192.217,
	195.084,
	196.966569,
	200.59,
	204.38,
	207.2,
	208.9804,
	209,
	210,
	222,
	223,
	226,
	227,
	232.03806,
	231.03588,
	238.02891}};

// standard density data
const std::array<double,AtomicData::n> AtomicData::rho = 
	{{0.00008988,
	0.0001785,
	0.534,
	1.85,
	2.34,
	2.267,
	0.0012506,
	0.001429,
	0.001696,
	0.0008999,
	0.971,
	1.738,
	2.698,
	2.3296,
	1.82,
	2.067,
	0.003214,
	0.0017837,
	0.862,
	1.54,
	2.989,
	4.54,
	6.11,
	7.15,
	7.44,
	7.874,
	8.86,
	8.912,
	8.96,
	7.134,
	5.907,
	5.323,
	5.776,
	4.809,
	3.122,
	0.003733,
	1.532,
	2.64,
	4.469,
	6.506,
	8.57,
	10.22,
	11.5,
	12.37,
	12.41,
	12.02,
	10.501,
	8.69,
	7.31,
	7.287,
	6.685,
	6.232,
	4.93,
	0.005887,
	1.873,
	3.594,
	6.145,
	6.77,
	6.773,
	7.007,
	7.26,
	7.52,
	5.243,
	7.895,
	8.229,
	8.55,
	8.795,
	9.066,
	9.321,
	6.965,
	9.84,
	13.31,
	16.654,
	19.25,
	21.02,
	22.61,
	22.56,
	21.46,
	19.282,
	13.5336,
	11.85,
	11.342,
	9.807,
	9.32,
	7,
	0.00973,
	1.87,
	5.5,
	10.07,
	11.72,
	15.37,
	18.95}};

// atomic symbols
const std::array<std::string,AtomicData::n> AtomicData::symbol =
	{{"H"
	,"He"
	,"Li"
	,"Be"
	,"B"
	,"C"
	,"N"
	,"O"
	,"F"
	,"Ne"
	,"Na"
	,"Mg"
	,"Al"
	,"Si"
	,"P"
	,"S"
	,"Cl"
	,"Ar"
	,"K"
	,"Ca"
	,"Sc"
	,"Ti"
	,"V"
	,"Cr"
	,"Mn"
	,"Fe"
	,"Co"
	,"Ni"
	,"Cu"
	,"Zn"
	,"Ga"
	,"Ge"
	,"As"
	,"Se"
	,"Br"
	,"Kr"
	,"Rb"
	,"Sr"
	,"Y"
	,"Zr"
	,"Nb"
	,"Mo"
	,"Tc"
	,"Ru"
	,"Rh"
	,"Pd"
	,"Ag"
	,"Cd"
	,"In"
	,"Sn"
	,"Sb"
	,"Te"
	,"I"
	,"Xe"
	,"Cs"
	,"Ba"
	,"La"
	,"Ce"
	,"Pr"
	,"Nd"
	,"Pm"
	,"Sm"
	,"Eu"
	,"Gd"
	,"Tb"
	,"Dy"
	,"Ho"
	,"Er"
	,"Tm"
	,"Yb"
	,"Lu"
	,"Hf"
	,"Ta"
	,"W"
	,"Re"
	,"Os"
	,"Ir"
	,"Pt"
	,"Au"
	,"Hg"
	,"Tl"
	,"Pb"
	,"Bi"
	,"Po"
	,"At"
	,"Rn"
	,"Fr"
	,"Ra"
	,"Ac"
	,"Th"
	,"Pa"
	,"U"}};

// atomic names
const std::array<std::string,AtomicData::n> AtomicData::name =
	{{"Hydrogen"
	,"Helium"
	,"Lithium"
	,"Beryllium"
	,"Boron"
	,"Carbon"
	,"Nitrogen"
	,"Oxygen"
	,"Fluorine"
	,"Neon"
	,"Sodium"
	,"Magnesium"
	,"Aluminum"
	,"Silicon"
	,"Phosphorus"
	,"Sulfur"
	,"Chlorine"
	,"Argon"
	,"Potassium"
	,"Calcium"
	,"Scandium"
	,"Titanium"
	,"Vanadium"
	,"Chromium"
	,"Manganese"
	,"Iron"
	,"Cobalt"
	,"Nickel"
	,"Copper"
	,"Zinc"
	,"Gallium"
	,"Germanium"
	,"Arsenic"
	,"Selenium"
	,"Bromine"
	,"Krypton"
	,"Rubidium"
	,"Strontium"
	,"Yttrium"
	,"Zirconium"
	,"Niobium"
	,"Molybdenum"
	,"Technetium"
	,"Ruthenium"
	,"Rhodium"
	,"Palladium"
	,"Silver"
	,"Cadmium"
	,"Indium"
	,"Tin"
	,"Antimony"
	,"Tellurium"
	,"Iodine"
	,"Xenon"
	,"Caesium"
	,"Barium"
	,"Lanthanum"
	,"Cerium"
	,"Praseodymium"
	,"Neodymium"
	,"Promethium"
	,"Samarium"
	,"Europium"
	,"Gadolinium"
	,"Terbium"
	,"Dysprosium"
	,"Holmium"
	,"Erbium"
	,"Thulium"
	,"Ytterbium"
	,"Lutetium"
	,"Hafnium"
	,"Tantalum"
	,"Tungsten"
	,"Rhenium"
	,"Osmium"
	,"Iridium"
	,"Platinum"
	,"Gold"
	,"Mercury"
	,"Thallium"
	,"Lead"
	,"Bismuth"
	,"Polonium"
	,"Astatine"
	,"Radon"
	,"Francium"
	,"Radium"
	,"Actinium"
	,"Thorium"
	,"Protactinium"
	,"Uranium"}};

// average ionization potentials
const std::array<double,AtomicData::n> AtomicData::ioniz = 
	{{18.8
	,41.7
	,47.6
	,62.7
	,76
	,77.3
	,86.7
	,97.7
	,120
	,139
	,148
	,156
	,162
	,165
	,172
	,180
	,185
	,194
	,193
	,196
	,218
	,230
	,239
	,259
	,270
	,280
	,296
	,310
	,322
	,320
	,324
	,330
	,338
	,340
	,349
	,358
	,358
	,363
	,370
	,378
	,390
	,406
	,410
	,423
	,443
	,458
	,466
	,471
	,480
	,487
	,494
	,495
	,498
	,497
	,490
	,483
	,480
	,493
	,507
	,521
	,537
	,548
	,562
	,564
	,585
	,600
	,623
	,640
	,652
	,662
	,672
	,682
	,684
	,693
	,698
	,707
	,735
	,759
	,755
	,756
	,748
	,759
	,765
	,775
	,785
	,793
	,796
	,799
	,808
	,825
	,837
	,847}};

// shell correction data
const std::array< std::array<double,5> , AtomicData::n> AtomicData::shell =
{{	{{-5.052,2.049,-0.3044,0.01966,-0.0004659 }},
	{{-2.158,0.8278,-0.1183,0.009298,-0.000166}},
	{{-0.5831,0.562,-0.1183,0.009298,-0.0002498}},
	{{0.2779,0.1745,-0.05684,0.005155,-0.0001488}},
	{{-2.445,1.283,-0.2205,0.0156,-0.000393}},
	{{-4.38,2.044,-0.3283,0.02221,-0.0005417}},
	{{-5.054,2.325,-0.3713,0.02506,-0.0006109}},
	{{-6.734,3.019,-0.4748,0.03171,-0.0007669}},
	{{-5.571,2.449,-0.3781,0.02483,-0.0005919}},
	{{-4.408,1.879,-0.2814,0.01769,-0.004168}},
	{{-4.959,2.073,-0.3054,0.01921,-0.0004403}},
	{{-5.51,2.266,-0.3295,0.02047,-0.0004637}},
	{{-6.061,2.46,-0.3535,0.02173,-0.0004871}},
	{{-6.294,2.538,-0.3628,0.0222,-0.0004956}},
	{{-6.527,2.616,-0.3721,0.02267,-0.000504}},
	{{-6.761,2.694,-0.3814,0.02314,-0.0005125}},
	{{-6.994,2.773,-0.3907,0.02361,-0.0005209}},
	{{-7.227,2.851,-0.4,0.02407,0.0005294}},
	{{-7.44,2.923,-0.4094,0.02462,-0.0005411}},
	{{-7.653,2.995,-0.4187,0.02516,-0.005529}},
	{{-8.012,3.123,-0.435,0.02605,-0.0005707}},
	{{-8.371,3.251,-0.4513,0.02694,-0.0005886}},
	{{-8.731,3.379,-0.4676,0.02783,-0.0006064}},
	{{-9.09,3.507,-0.4838,0.02872,-0.0006243}},
	{{-9.449,3.635,-0.5001,0.02961,-0.0006421}},
	{{-9.809,3.763,-0.5164,0.0305,-0.00066}},
	{{-10.17,3.891,-0.5327,0.03139,-0.0006779}},
	{{-10.53,4.019,-0.549,0.03229,-0.0006957}},
	{{-11.18,4.252,-0.5791,0.03399,-0.0007314}},
	{{-11.57,4.394,-0.598,0.03506,-0.0007537}},
	{{-11.95,4.537,-0.6169,0.03613,-0.0007759}},
	{{-12.34,4.68,-0.6358,0.03721,-0.0007981}},
	{{-12.72,4.823,-0.6547,0.03828,-0.0008203}},
	{{-13.11,4.965,-0.6735,0.03935,-0.0008425}},
	{{-13.4,5.083,-0.6906,0.04042,-0.0008675}},
	{{-13.69,5.2,-0.7076,0.0415,-0.0008925}},
	{{-13.92,5.266,-0.714,0.04173,-0.0008943}},
	{{-14.14,5.331,-0.7205,0.04196,-0.0008962}},
	{{-14.36,5.397,-0.7269,0.04219,-0.000898}},
	{{-14.59,5.463,-0.7333,0.04242,-0.0008998}},
	{{-16.22,6.094,-0.8225,0.04791,-0.001024}},
	{{-17.85,6.725,-0.9116,0.05339,-0.001148}},
	{{-17.96,6.752,-0.9135,0.05341,-0.001147}},
	{{-18.07,6.779,-0.9154,0.05342,-0.001145}},
	{{-18.18,6.806,-0.9173,0.05343,-0.001143}},
	{{-18.28,6.833,-0.9192,0.05345,-0.001142}},
	{{-18.39,6.86,-0.9211,0.05346,-0.00114}},
	{{-18.62,6.915,-0.9243,0.0534,-0.001134}},
	{{-18.85,6.969,-0.9275,0.05335,-0.001127}},
	{{-19.07,7.024,-0.9308,0.05329,-0.001121}},
	{{-19.57,7.225,-0.9603,0.05518,-0.001165}},
	{{-20.07,7.426,-0.9899,0.05707,-0.001209}},
	{{-20.56,7.627,-1.019,0.05896,-0.001254}},
	{{-21.06,7.828,-1.049,0.06085,-0.001298}},
	{{-20.4,7.54,-1.004,0.05782,-0.001224}},
	{{-19.74,7.252,-0.9588,0.05479,-0.001151}},
	{{-19.08,6.964,-0.9136,0.05176,-0.001077}},
	{{-18.43,6.677,-0.8684,0.04872,-0.001003}},
	{{-17.77,6.389,-0.8233,0.04569,-0.0009292}},
	{{-17.11,6.101,-0.7781,0.04266,-0.0008553}},
	{{-16.45,5.813,-0.733,0.03963,-0.0007815}},
	{{-15.79,5.526,-0.6878,0.0366,-0.0007077}},
	{{-15.13,5.238,-0.6426,0.03357,-0.0006339}},
	{{-14.47,4.95,-0.5975,0.03053,-0.0005601}},
	{{-14.56,4.984,-0.6022,0.03082,-0.0005668}},
	{{-14.65,5.017,-0.6069,0.03111,-0.0005734}},
	{{-14.74,5.051,-0.6117,0.03141,-0.0005801}},
	{{-14.83,5.085,-0.6164,0.0317,-0.0005867}},
	{{-14.91,5.119,-0.6211,0.03199,-0.0005933}},
	{{-15,5.153,-0.6258,0.03228,-0.0006}},
	{{-15.09,5.186,-0.6305,0.03257,-0.0006066}},
	{{-15.18,5.22,-0.6353,0.03286,-0.0006133}},
	{{-15.27,5.254,-0.64,0.03315,-0.0006199}},
	{{-15.67,5.392,-0.6577,0.03418,-0.0006426}},
	{{-16.07,5.529,-0.6755,0.03521,-0.0006654}},
	{{-16.47,5.667,-0.6932,0.03624,-0.0006881}},
	{{-16.88,5.804,-0.711,0.03727,-0.0007109}},
	{{-17.28,5.942,-0.7287,0.0383,-0.0007336}},
	{{-17.02,5.846,-0.7149,0.0374,-0.0007114}},
	{{-17.84,6.183,-0.7659,0.04076,-0.0007925}},
	{{-18.66,6.52,-0.8169,0.04411,-0.0008737}},
	{{-19.48,6.857,-0.8678,0.04747,-0.0009548}},
	{{-19.55,6.871,-0.8686,0.04748,-0.0009544}},
	{{-19.62,6.884,-0.8694,0.04748,-0.000954}},
	{{-19.69,6.898,-0.8702,0.04749,-0.0009536}},
	{{-19.76,6.912,-0.871,0.04749,-0.0009532}},
	{{-19.83,6.926,-0.8718,0.0475,-0.0009528}},
	{{-19.9,6.94,-0.8726,0.04751,-0.0009524}},
	{{-19.97,6.953,-0.8733,0.04751,-0.000952}},
	{{-20.04,6.967,-0.8741,0.04752,-0.0009516}},
	{{-20.11,6981,-0.8749,0.04752,-0.0009512}},
	{{-20.18,6.995,-0.8757,0.04753,-0.0009508}} }};

// get the atomic weight
double AtomicData::get_AMU(int Z)
{
	if( Z < 1 || Z > n )
		return std::numeric_limits<double>::quiet_NaN();
	return AMU[Z-1];
}

// get the mass density
double AtomicData::get_rho(int Z)
{
	// sanity check:
	if( Z < 1 || Z > n )
		return std::numeric_limits<double>::quiet_NaN();
	return rho[Z-1];
}

// get the atomic symbol
std::string AtomicData::get_symbol(int Z)
{
	// sanity check:
	if( Z < 1 || Z > n )
		return "";
	return symbol[Z-1];
}

// look up number given symbol
int AtomicData::get_num_from_symbol(std::string symbol)
{
	// loop over all of the data:
	for(int i=0; i < n; i++)
	{
		if( AtomicData::symbol[i] == symbol )
			return i+1;
	}
	return -1;
}

// get the common name
std::string AtomicData::get_name(int Z)
{
	// sanity check:
	if( Z < 1 || Z > n )
		return "";
	return name[Z-1];
}

// look up number given name
int AtomicData::get_num_from_name(std::string name)
{
	// loop over all of the data:
	for(int i=0; i < n; i++)
	{
		if( AtomicData::name[i] == name )
			return i+1;
	}
	return -1;
}

// get the mean ionization
double AtomicData::get_mean_ionization(int Z)
{
	// sanity check:
	if( Z < 1 || Z > n )
		return std::numeric_limits<double>::quiet_NaN();
	return ioniz[Z-1];
}

// get the shell coefficients
std::array<double,5> AtomicData::get_shell_coeff(int Z)
{
	// sanity check:
	if( Z < 1 || Z > n )
	{
		double nan = std::numeric_limits<double>::quiet_NaN();
		return std::array<double,5> {{nan,nan,nan,nan,nan}};
	}
	return shell[Z-1];
}

} // end of namespace